{"version":3,"file":"index.js","names":["_nodeFs","require","_nodePath","_interopRequireDefault","_nodeProcess","_allureJsCommons","_sdk","_reporter","_legacy","_utils","_test","e","__esModule","_regeneratorRuntime","t","r","Object","prototype","n","hasOwnProperty","o","defineProperty","value","i","Symbol","a","iterator","c","asyncIterator","u","toStringTag","define","enumerable","configurable","writable","wrap","Generator","create","Context","makeInvokeMethod","tryCatch","type","arg","call","h","l","f","s","y","GeneratorFunction","GeneratorFunctionPrototype","p","d","getPrototypeOf","v","values","g","defineIteratorMethods","forEach","_invoke","AsyncIterator","invoke","_typeof","resolve","__await","then","callInvokeWithMethodAndArg","Error","done","method","delegate","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","TypeError","resultName","next","nextLoc","pushTryEntry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","reverse","pop","prev","charAt","slice","stop","rval","handle","complete","finish","_catch","delegateYield","asyncGeneratorStep","_asyncToGenerator","arguments","apply","_next","_throw","_createForOfIteratorHelper","Array","isArray","_unsupportedIterableToArray","_n","F","_toArray","_arrayWithHoles","_iterableToArray","_nonIterableRest","_toConsumableArray","_arrayWithoutHoles","_nonIterableSpread","_arrayLikeToArray","toString","from","test","ownKeys","getOwnPropertySymbols","filter","getOwnPropertyDescriptor","_objectSpread","_defineProperty","getOwnPropertyDescriptors","defineProperties","_classCallCheck","_defineProperties","_toPropertyKey","key","_createClass","_classPrivateMethodInitSpec","_checkPrivateRedeclaration","add","has","_toPrimitive","toPrimitive","String","Number","_assertClassBrand","_AllureReporter_brand","WeakSet","AllureReporter","exports","config","Date","Map","options","suiteTitle","detail","onConfigure","testPlan","parseTestPlan","configElement","testsWithSelectors","tests","selector","v1ReporterTests","v2ReporterTests","cliArgs","selectorToGrepPattern","escapeRegExp","path","normalize","concat","v2SelectorsArgs","map","replace","v1SelectorsArgs","split","onError","onExit","onStdErr","onStdOut","onBegin","suite","allureRuntime","ReporterRuntime","writer","createDefaultWriter","resultsDir","onTestBegin","parent","titleMetadata","extractMetadataFromString","title","project","testFilePath","relative","testDir","location","file","relativeFileParts","sep","relativeFile","join","_suite$titlePath","titlePath","_suite$titlePath2","suiteTitles","nameSuites","testCaseIdBase","result","cleanTitle","labels","getEnvironmentLabels","links","parameters","steps","testCaseId","md5","fullName","line","column","getLanguageLabel","getFrameworkLabel","getPackageLabel","_ref","tags","tag","LabelName","TAG","startsWith","substring","_iterator","annotations","_step","annotation","_this$options$links","formatLink","LinkType","ISSUE","url","description","_this$options$links2","TMS","annotationLabel","getMetadataLabel","status","Status","PASSED","stage","Stage","FINISHED","attachments","statusDetails","err","repeatEach","repeatEachIndex","testUuid","startTest","allureResultsUuids","set","id","startedTestCasesTitlesCache","onStepBegin","_result","step","isRootBeforeHook","BEFORE_HOOKS_ROOT_STEP_TITLE","isRootAfterHook","AFTER_HOOKS_ROOT_STEP_TITLE","isRootHook","isBeforeHookDescendant","isBeforeHookStep","isAfterHookDescendant","isAfterHookStep","isHookStep","get","category","_this$allureRuntime","_this$attachmentSteps","currentStep","attachmentSteps","_shouldIgnoreStep","baseStep","createStepResult","start","startTime","getTime","RUNNING","uuid","randomUuid","stack","beforeHooksStepsStack","afterHooksStepsStack","startStep","attachStack","beforeHooksAttachmentsStack","afterHooksAttachmentsStack","updateStep","stepResult","_attachStack$get","normalizeHookTitle","stopStep","ShallowStepsStack","undefined","onStepEnd","isAfterHook","isHook","_getWorstTestStepResu","_ref2","getWorstTestStepResult","_ref2$status","error","FAILED","getMessageAndTraceFromError","duration","_getWorstTestStepResu2","_ref3","_ref3$status","_onTestEnd","_callee","_this","_this$beforeHooksAtta","_this$afterHooksAttac","_this$attachmentSteps2","threadId","thread","_test$parent$titlePat","_test$parent$titlePat2","projectSuiteTitle","fileSuiteTitle","beforeHooksStack","afterHooksStack","attachmentsInBeforeHooks","attachmentsInAfterHooks","hookAttachmentUuids","attachmentsInSteps","attachment","attachmentStep","hookAttachmentNames","onlyHooksAttachments","_iterator2","_step2","_loop","_callee$","_context2","parallelIndex","workerIndex","process","pid","updateTest","testResult","getHostLabel","getThreadLabel","hasLabel","PARENT_SUITE","SUITE","SUB_SUITE","_test$annotations","skipReason","find","message","statusToAllureStats","expectedStatus","Set","hookStep","Boolean","processAttachment","stdout","writeAttachment","Buffer","stripAnsi","contentType","ContentType","TEXT","stderr","att","matchingBeforeHookStep","matchingAfterHookStep","targetStack","fileName","_loop$","_context","findStepByUuid","addAttachment","source","t1","mappedLabels","reduce","acc","label","newLabels","flatMap","labelName","labelsGroup","_testResult$steps","unshift","_testResult$steps2","stopTest","writeTest","onTestEnd","_x","_x2","_addSkippedResults","_callee2","_this2","unprocessedCases","_iterator3","_step3","testCase","_callee2$","_context3","allTests","_ref4","includes","SKIPPED","errors","retry","globalStartTime","t0","addSkippedResults","_onEnd","_callee3","_callee3$","_context4","writeEnvironmentInfo","writeCategoriesDefinitions","onEnd","printsToStdio","processStepMetadataMessage","attachmentStepUuid","_message$data","data","_message$data$paramet","_step$parameters","_processAttachment","_callee4","allureRuntimeMessage","parentUuid","pathWithoutEnd","actualBase64","expectedBase64","diffBase64","diffName","_callee4$","_context5","body","ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE","JSON","parse","applyRuntimeMessages","existsSync","match","diffEndRegexp","processedDiffs","readImageAsBase64","stringify","expected","actual","diff","IMAGEDIFF","fileExtension","_x3","_x4","_x5","version","isDescendantOfStepWithTitle","allure","allurePlaywrightLegacyApi","_default"],"sources":["../../src/index.ts"],"sourcesContent":["import type { FullConfig } from \"@playwright/test\";\nimport type { TestResult as PlaywrightTestResult, Suite, TestCase, TestStep } from \"@playwright/test/reporter\";\nimport { existsSync } from \"node:fs\";\nimport path from \"node:path\";\nimport process from \"node:process\";\nimport {\n  ContentType,\n  type ImageDiffAttachment,\n  type Label,\n  LabelName,\n  LinkType,\n  Stage,\n  Status,\n  type StepResult,\n  type TestResult,\n} from \"allure-js-commons\";\nimport type { RuntimeMessage, RuntimeStepMetadataMessage, TestPlanV1Test } from \"allure-js-commons/sdk\";\nimport {\n  extractMetadataFromString,\n  getMessageAndTraceFromError,\n  getMetadataLabel,\n  hasLabel,\n  stripAnsi,\n} from \"allure-js-commons/sdk\";\nimport {\n  ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE,\n  ReporterRuntime,\n  ShallowStepsStack,\n  createDefaultWriter,\n  createStepResult,\n  escapeRegExp,\n  formatLink,\n  getEnvironmentLabels,\n  getFrameworkLabel,\n  getHostLabel,\n  getLanguageLabel,\n  getPackageLabel,\n  getThreadLabel,\n  getWorstTestStepResult,\n  md5,\n  parseTestPlan,\n  randomUuid,\n  readImageAsBase64,\n} from \"allure-js-commons/sdk/reporter\";\nimport { allurePlaywrightLegacyApi } from \"./legacy.js\";\nimport type { AllurePlaywrightReporterConfig, AttachStack, ReporterV2 } from \"./model.js\";\nimport {\n  AFTER_HOOKS_ROOT_STEP_TITLE,\n  BEFORE_HOOKS_ROOT_STEP_TITLE,\n  diffEndRegexp,\n  isAfterHookStep,\n  isBeforeHookStep,\n  isDescendantOfStepWithTitle,\n  normalizeHookTitle,\n  statusToAllureStats,\n} from \"./utils.js\";\n\nexport class AllureReporter implements ReporterV2 {\n  config!: FullConfig;\n  suite!: Suite;\n  options: AllurePlaywrightReporterConfig;\n\n  private allureRuntime: ReporterRuntime | undefined;\n  private globalStartTime = new Date();\n  private processedDiffs: string[] = [];\n  private readonly startedTestCasesTitlesCache: string[] = [];\n  private readonly allureResultsUuids: Map<string, string> = new Map();\n  private readonly attachmentSteps: Map<string, (string | undefined)[]> = new Map();\n  private beforeHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private afterHooksStepsStack: Map<string, ShallowStepsStack> = new Map();\n  private beforeHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n  private afterHooksAttachmentsStack: Map<string, AttachStack[]> = new Map();\n\n  constructor(config: AllurePlaywrightReporterConfig) {\n    this.options = { suiteTitle: true, detail: true, ...config };\n  }\n\n  onConfigure(config: FullConfig): void {\n    this.config = config;\n\n    const testPlan = parseTestPlan();\n\n    if (!testPlan) {\n      return;\n    }\n\n    // @ts-ignore\n    const configElement = config[Object.getOwnPropertySymbols(config)[0]];\n\n    if (!configElement) {\n      return;\n    }\n\n    const testsWithSelectors = testPlan.tests.filter((test) => test.selector);\n    const v1ReporterTests: TestPlanV1Test[] = [];\n    const v2ReporterTests: TestPlanV1Test[] = [];\n    const cliArgs: string[] = [];\n\n    testsWithSelectors.forEach((test) => {\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n      if (!/#/.test(test.selector!)) {\n        v2ReporterTests.push(test);\n        return;\n      }\n\n      v1ReporterTests.push(test);\n    });\n\n    // The path needs to be specific to the current OS. Otherwise, it may not match against the test file.\n    const selectorToGrepPattern = (selector: string) => escapeRegExp(path.normalize(`/${selector}`));\n\n    if (v2ReporterTests.length) {\n      // we need to cut off column because playwright works only with line number\n      const v2SelectorsArgs = v2ReporterTests\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.replace(/:\\d+$/, \"\"))\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v2SelectorsArgs);\n    }\n\n    if (v1ReporterTests.length) {\n      const v1SelectorsArgs = v1ReporterTests\n        // we can filter tests only by absolute path, so we need to cut off test name\n        // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\n        .map((test) => test.selector!.split(\"#\")[0])\n        .map(selectorToGrepPattern);\n\n      cliArgs.push(...v1SelectorsArgs);\n    }\n\n    if (!cliArgs.length) {\n      return;\n    }\n\n    configElement.cliArgs = cliArgs;\n  }\n\n  onError(): void {}\n\n  onExit(): void {}\n\n  onStdErr(): void {}\n\n  onStdOut(): void {}\n\n  onBegin(suite: Suite): void {\n    this.suite = suite;\n    this.allureRuntime = new ReporterRuntime({\n      ...this.options,\n      writer: createDefaultWriter({ resultsDir: this.options.resultsDir }),\n    });\n  }\n\n  onTestBegin(test: TestCase) {\n    const suite = test.parent;\n    const titleMetadata = extractMetadataFromString(test.title);\n    const project = suite.project()!;\n    const testFilePath = path.relative(project?.testDir, test.location.file);\n    const relativeFileParts = testFilePath.split(path.sep);\n    const relativeFile = relativeFileParts.join(\"/\");\n    // root > project > file path > test.describe...\n    const [, , , ...suiteTitles] = suite.titlePath();\n    const nameSuites = suiteTitles.length > 0 ? `${suiteTitles.join(\" \")} ` : \"\";\n    const testCaseIdBase = `${relativeFile}#${nameSuites}${test.title}`;\n    const result: Partial<TestResult> = {\n      name: titleMetadata.cleanTitle,\n      labels: [...titleMetadata.labels, ...getEnvironmentLabels()],\n      links: [...titleMetadata.links],\n      parameters: [],\n      steps: [],\n      testCaseId: md5(testCaseIdBase),\n      fullName: `${relativeFile}:${test.location.line}:${test.location.column}`,\n      titlePath: relativeFileParts.concat(...suiteTitles),\n    };\n\n    result.labels!.push(getLanguageLabel());\n    result.labels!.push(getFrameworkLabel(\"playwright\"));\n    result.labels!.push(getPackageLabel(testFilePath));\n    result.labels!.push({ name: \"titlePath\", value: suite.titlePath().join(\" > \") });\n\n    // support for earlier playwright versions\n    if (\"tags\" in test) {\n      const tags: Label[] = test.tags.map((tag) => ({\n        name: LabelName.TAG,\n        value: tag.startsWith(\"@\") ? tag.substring(1) : tag,\n      }));\n      result.labels!.push(...tags);\n    }\n\n    if (\"annotations\" in test) {\n      for (const annotation of test.annotations) {\n        if (annotation.type === \"skip\" || annotation.type === \"fixme\") {\n          continue;\n        }\n\n        if (annotation.type === \"issue\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.ISSUE,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"tms\" || annotation.type === \"test_key\") {\n          result.links!.push(\n            formatLink(this.options.links ?? {}, {\n              type: LinkType.TMS,\n              url: annotation.description!,\n            }),\n          );\n          continue;\n        }\n\n        if (annotation.type === \"description\") {\n          result.description = annotation.description;\n          continue;\n        }\n\n        const annotationLabel = getMetadataLabel(annotation.type, annotation.description);\n\n        if (annotationLabel) {\n          result.labels!.push(annotationLabel);\n          continue;\n        }\n\n        result.steps!.push({\n          name: `${annotation.type}: ${annotation.description!}`,\n          status: Status.PASSED,\n          stage: Stage.FINISHED,\n          parameters: [],\n          steps: [],\n          attachments: [],\n          statusDetails: {},\n        });\n      }\n    }\n\n    if (project?.name) {\n      result.parameters!.push({ name: \"Project\", value: project.name });\n    }\n\n    if (project?.repeatEach > 1) {\n      result.parameters!.push({ name: \"Repetition\", value: `${test.repeatEachIndex + 1}` });\n    }\n\n    const testUuid = this.allureRuntime!.startTest(result);\n\n    this.allureResultsUuids.set(test.id, testUuid);\n    this.startedTestCasesTitlesCache.push(titleMetadata.cleanTitle);\n  }\n\n  #shouldIgnoreStep(step: TestStep) {\n    if (!this.options.detail && step.category !== \"test.step\") {\n      return true;\n    }\n\n    // ignore noisy route.continue()\n    if (step.category === \"pw:api\" && step.title === \"route.continue()\") {\n      return true;\n    }\n\n    // playwright doesn't report this step\n    if (step.title === \"Worker Cleanup\" || isDescendantOfStepWithTitle(step, \"Worker Cleanup\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  onStepBegin(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isRootHook = isRootBeforeHook || isRootAfterHook;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isHookStep = isBeforeHookDescendant || isAfterHookDescendant;\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n\n    if (step.category === \"attach\" && !isHookStep) {\n      const currentStep = this.allureRuntime?.currentStep(testUuid);\n      this.attachmentSteps.set(testUuid, [...(this.attachmentSteps.get(testUuid) ?? []), currentStep]);\n      return;\n    }\n\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n\n    const baseStep: StepResult = {\n      ...createStepResult(),\n      name: step.title,\n      start: step.startTime.getTime(),\n      stage: Stage.RUNNING,\n      uuid: randomUuid(),\n    };\n\n    if (isHookStep) {\n      const stack = isBeforeHookDescendant\n        ? this.beforeHooksStepsStack.get(test.id)!\n        : this.afterHooksStepsStack.get(test.id)!;\n\n      if (step.category === \"attach\") {\n        stack.startStep(baseStep);\n        const attachStack = isBeforeHookDescendant ? this.beforeHooksAttachmentsStack : this.afterHooksAttachmentsStack;\n        stack.updateStep((stepResult) => {\n          stepResult.name = normalizeHookTitle(stepResult.name!);\n          stepResult.stage = Stage.FINISHED;\n          attachStack.set(test.id, [...(attachStack.get(test.id) ?? []), { ...step, uuid: stepResult.uuid as string }]);\n        });\n        stack.stopStep();\n        return;\n      }\n      stack.startStep(baseStep);\n\n      return;\n    }\n\n    if (isRootHook) {\n      const stack = new ShallowStepsStack();\n      stack.startStep(baseStep);\n      if (isRootBeforeHook) {\n        this.beforeHooksStepsStack.set(test.id, stack);\n      } else {\n        this.afterHooksStepsStack.set(test.id, stack);\n      }\n      return;\n    }\n\n    this.allureRuntime!.startStep(testUuid, undefined, baseStep)!;\n  }\n\n  onStepEnd(test: TestCase, _result: PlaywrightTestResult, step: TestStep): void {\n    if (this.#shouldIgnoreStep(step)) {\n      return;\n    }\n    // ignore attach steps since attachments are already in the report\n    if (step.category === \"attach\") {\n      return;\n    }\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    const isRootBeforeHook = step.title === BEFORE_HOOKS_ROOT_STEP_TITLE;\n    const isRootAfterHook = step.title === AFTER_HOOKS_ROOT_STEP_TITLE;\n    const isBeforeHookDescendant = isBeforeHookStep(step);\n    const isAfterHookDescendant = isAfterHookStep(step);\n    const isAfterHook = isRootAfterHook || isAfterHookDescendant;\n    const isHook = isRootBeforeHook || isRootAfterHook || isBeforeHookDescendant || isAfterHookDescendant;\n\n    if (isHook) {\n      const stack = isAfterHook ? this.afterHooksStepsStack.get(test.id)! : this.beforeHooksStepsStack.get(test.id)!;\n\n      stack.updateStep((stepResult) => {\n        const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n        stepResult.status = step.error ? Status.FAILED : status;\n        stepResult.stage = Stage.FINISHED;\n        if (step.error) {\n          stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n        }\n      });\n      stack.stopStep({\n        duration: step.duration,\n      });\n      return;\n    }\n\n    const currentStep = this.allureRuntime!.currentStep(testUuid);\n\n    if (!currentStep) {\n      return;\n    }\n\n    this.allureRuntime!.updateStep(currentStep, (stepResult) => {\n      const { status = Status.PASSED } = getWorstTestStepResult(stepResult.steps) ?? {};\n      stepResult.status = step.error ? Status.FAILED : status;\n      stepResult.stage = Stage.FINISHED;\n      if (step.error) {\n        stepResult.statusDetails = { ...getMessageAndTraceFromError(step.error) };\n      }\n    });\n    this.allureRuntime!.stopStep(currentStep, { duration: step.duration });\n  }\n\n  async onTestEnd(test: TestCase, result: PlaywrightTestResult) {\n    const testUuid = this.allureResultsUuids.get(test.id)!;\n    // We need to check parallelIndex first because pw introduced this field only in v1.30.0\n    const threadId = result.parallelIndex !== undefined ? result.parallelIndex : result.workerIndex;\n    const thread = `pid-${process.pid}-worker-${threadId}`;\n    const error = result.error;\n    // only apply default suites if not set by user\n    const [, projectSuiteTitle, fileSuiteTitle, ...suiteTitles] = test.parent.titlePath();\n    const beforeHooksStack = this.beforeHooksStepsStack.get(test.id);\n    const afterHooksStack = this.afterHooksStepsStack.get(test.id);\n\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      testResult.labels.push(getHostLabel());\n      testResult.labels.push(getThreadLabel(thread));\n\n      if (projectSuiteTitle && !hasLabel(testResult, LabelName.PARENT_SUITE)) {\n        testResult.labels.push({ name: LabelName.PARENT_SUITE, value: projectSuiteTitle });\n      }\n\n      if (this.options.suiteTitle && fileSuiteTitle && !hasLabel(testResult, LabelName.SUITE)) {\n        testResult.labels.push({ name: LabelName.SUITE, value: fileSuiteTitle });\n      }\n\n      if (suiteTitles.length > 0 && !hasLabel(testResult, LabelName.SUB_SUITE)) {\n        testResult.labels.push({ name: LabelName.SUB_SUITE, value: suiteTitles.join(\" > \") });\n      }\n\n      if (error) {\n        testResult.statusDetails = { ...getMessageAndTraceFromError(error) };\n      } else {\n        const skipReason = test.annotations?.find(\n          (annotation) => annotation.type === \"skip\" || annotation.type === \"fixme\",\n        )?.description;\n\n        if (skipReason) {\n          testResult.statusDetails = { ...testResult.statusDetails, message: skipReason };\n        }\n      }\n\n      testResult.status = statusToAllureStats(result.status, test.expectedStatus);\n      testResult.stage = Stage.FINISHED;\n    });\n\n    const attachmentsInBeforeHooks = this.beforeHooksAttachmentsStack.get(test.id) ?? [];\n    const attachmentsInAfterHooks = this.afterHooksAttachmentsStack.get(test.id) ?? [];\n    const hookAttachmentUuids = new Set(\n      [...attachmentsInBeforeHooks, ...attachmentsInAfterHooks]\n        .map((hookStep) => normalizeHookTitle(hookStep.title))\n        .filter(Boolean),\n    );\n    const attachmentSteps = this.attachmentSteps.get(testUuid) ?? [];\n    const attachmentsInSteps = result.attachments.filter((attachment) => !hookAttachmentUuids.has(attachment.name));\n\n    for (let i = 0; i < attachmentsInSteps.length; i++) {\n      const attachment = attachmentsInSteps[i];\n      const attachmentStep = attachmentSteps.length > i ? attachmentSteps[i] : undefined;\n      await this.processAttachment(testUuid, attachmentStep, attachment);\n    }\n\n    if (result.stdout.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stdout\",\n        Buffer.from(stripAnsi(result.stdout.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    if (result.stderr.length > 0) {\n      this.allureRuntime!.writeAttachment(\n        testUuid,\n        undefined,\n        \"stderr\",\n        Buffer.from(stripAnsi(result.stderr.join(\"\")), \"utf-8\"),\n        {\n          contentType: ContentType.TEXT,\n        },\n      );\n    }\n\n    // FIXME: temp logic for labels override, we need it here to keep the reporter compatible with v2 API\n    // in next iterations we need to implement the logic for every javascript integration\n\n    const hookAttachmentNames = new Set(\n      [...attachmentsInBeforeHooks, ...attachmentsInAfterHooks]\n        .map((hookStep) => normalizeHookTitle(hookStep.title))\n        .filter(Boolean),\n    );\n    const onlyHooksAttachments = result.attachments.filter((att) => hookAttachmentNames.has(att.name));\n\n    for (const attachment of onlyHooksAttachments) {\n      const matchingBeforeHookStep = attachmentsInBeforeHooks.find(\n        (step) => normalizeHookTitle(step.title) === attachment.name,\n      );\n      const matchingAfterHookStep = attachmentsInAfterHooks.find(\n        (step) => normalizeHookTitle(step.title) === attachment.name,\n      );\n      const targetStack = matchingBeforeHookStep ? beforeHooksStack : afterHooksStack;\n      const hookStep = matchingBeforeHookStep || matchingAfterHookStep;\n\n      if (targetStack && hookStep) {\n        const stepResult = targetStack?.findStepByUuid(hookStep?.uuid);\n        if (stepResult) {\n          const fileName = targetStack.addAttachment(attachment, this.allureRuntime!.writer);\n          stepResult.attachments.push({\n            name: attachment.name,\n            type: attachment.contentType,\n            source: fileName,\n          });\n        }\n      }\n    }\n    this.allureRuntime!.updateTest(testUuid, (testResult) => {\n      const mappedLabels = testResult.labels.reduce<Record<string, Label[]>>((acc, label) => {\n        if (!acc[label.name]) {\n          acc[label.name] = [];\n        }\n\n        acc[label.name].push(label);\n\n        return acc;\n      }, {});\n      const newLabels = Object.keys(mappedLabels).flatMap((labelName) => {\n        const labelsGroup = mappedLabels[labelName];\n\n        if (\n          labelName === LabelName.SUITE ||\n          labelName === LabelName.PARENT_SUITE ||\n          labelName === LabelName.SUB_SUITE\n        ) {\n          return labelsGroup.slice(-1);\n        }\n\n        return labelsGroup;\n      });\n\n      if (beforeHooksStack) {\n        testResult.steps.unshift(...beforeHooksStack.steps);\n        this.beforeHooksStepsStack.delete(test.id);\n      }\n\n      if (afterHooksStack) {\n        testResult.steps.push(...afterHooksStack.steps);\n        this.afterHooksStepsStack.delete(test.id);\n      }\n\n      testResult.labels = newLabels;\n    });\n\n    this.allureRuntime!.stopTest(testUuid, { duration: result.duration });\n    this.allureRuntime!.writeTest(testUuid);\n  }\n\n  async addSkippedResults() {\n    const unprocessedCases = this.suite.allTests().filter(({ title }) => {\n      const titleMetadata = extractMetadataFromString(title);\n\n      return !this.startedTestCasesTitlesCache.includes(titleMetadata.cleanTitle);\n    });\n\n    for (const testCase of unprocessedCases) {\n      this.onTestBegin(testCase);\n      await this.onTestEnd(testCase, {\n        status: Status.SKIPPED,\n        attachments: [],\n        duration: 0,\n        errors: [],\n        parallelIndex: 0,\n        workerIndex: 0,\n        retry: 0,\n        steps: [],\n        stderr: [],\n        stdout: [],\n        startTime: this.globalStartTime,\n      });\n    }\n  }\n\n  async onEnd() {\n    await this.addSkippedResults();\n\n    this.allureRuntime!.writeEnvironmentInfo();\n    this.allureRuntime!.writeCategoriesDefinitions();\n  }\n\n  printsToStdio(): boolean {\n    return false;\n  }\n\n  private processStepMetadataMessage(attachmentStepUuid: string, message: RuntimeStepMetadataMessage) {\n    const { name, parameters = [] } = message.data;\n\n    this.allureRuntime!.updateStep(attachmentStepUuid, (step) => {\n      if (name) {\n        step.name = name;\n      }\n\n      step.parameters.push(...parameters);\n    });\n  }\n\n  private async processAttachment(\n    testUuid: string,\n    attachmentStepUuid: string | undefined,\n    attachment: {\n      name: string;\n      contentType: string;\n      path?: string;\n      body?: Buffer;\n    },\n  ) {\n    if (!attachment.body && !attachment.path) {\n      return;\n    }\n\n    const allureRuntimeMessage = attachment.contentType === ALLURE_RUNTIME_MESSAGE_CONTENT_TYPE;\n\n    if (allureRuntimeMessage && !attachment.body) {\n      return;\n    }\n\n    if (allureRuntimeMessage) {\n      const message = JSON.parse(attachment.body!.toString()) as RuntimeMessage;\n\n      if (message.type === \"step_metadata\") {\n        this.processStepMetadataMessage(attachmentStepUuid!, message);\n        return;\n      }\n\n      this.allureRuntime!.applyRuntimeMessages(testUuid, [message]);\n      return;\n    }\n\n    const parentUuid = this.allureRuntime!.startStep(testUuid, attachmentStepUuid, { name: attachment.name });\n\n    // only stop if step is created. Step may not be created only if test with specified uuid doesn't exists.\n    // usually, missing test by uuid means we should completely skip result processing;\n    // the later operations are safe and will only produce console warnings\n    if (parentUuid) {\n      this.allureRuntime!.stopStep(parentUuid, undefined);\n    }\n\n    if (attachment.body) {\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.body, {\n        contentType: attachment.contentType,\n      });\n    } else if (!existsSync(attachment.path!)) {\n      return;\n    } else {\n      const contentType =\n        attachment.name === \"trace\" && attachment.contentType === \"application/zip\"\n          ? \"application/vnd.allure.playwright-trace\"\n          : attachment.contentType;\n\n      this.allureRuntime!.writeAttachment(testUuid, parentUuid, attachment.name, attachment.path!, {\n        contentType,\n      });\n    }\n\n    if (!attachment.name.match(diffEndRegexp)) {\n      return;\n    }\n\n    const pathWithoutEnd = attachment.path!.replace(diffEndRegexp, \"\");\n\n    if (this.processedDiffs.includes(pathWithoutEnd)) {\n      return;\n    }\n\n    const actualBase64 = await readImageAsBase64(`${pathWithoutEnd}-actual.png`);\n    const expectedBase64 = await readImageAsBase64(`${pathWithoutEnd}-expected.png`);\n    const diffBase64 = await readImageAsBase64(`${pathWithoutEnd}-diff.png`);\n    const diffName = attachment.name.replace(diffEndRegexp, \"\");\n\n    this.allureRuntime!.writeAttachment(\n      testUuid,\n      undefined,\n      diffName,\n      Buffer.from(\n        JSON.stringify({\n          expected: expectedBase64,\n          actual: actualBase64,\n          diff: diffBase64,\n          name: diffName,\n        } as ImageDiffAttachment),\n        \"utf-8\",\n      ),\n      {\n        contentType: ContentType.IMAGEDIFF,\n        fileExtension: \".imagediff\",\n      },\n    );\n\n    this.processedDiffs.push(pathWithoutEnd);\n  }\n\n  version(): \"v2\" {\n    return \"v2\";\n  }\n}\n\n/**\n * @deprecated for removal, import functions directly from \"allure-js-commons\".\n */\nexport const allure = allurePlaywrightLegacyApi;\n\n/**\n * @deprecated for removal, import functions directly from \"@playwright/test\".\n */\nexport { test, expect } from \"@playwright/test\";\n\nexport default AllureReporter;\n"],"mappings":"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","ignoreList":[]}